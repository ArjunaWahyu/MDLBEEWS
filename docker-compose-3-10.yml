version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    container_name: zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: wurstmeister/kafka
    tty: true
    restart: always
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LOG_RETENTION_MS: 600000  
      KAFKA_NUM_PARTITIONS: 5
    depends_on:
      - zookeeper

  kafka2:
    image: wurstmeister/kafka
    tty: true
    restart: always
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LOG_RETENTION_MS: 600000
      KAFKA_NUM_PARTITIONS: 5
    depends_on:
      - zookeeper

  kafka3:
    image: wurstmeister/kafka
    tty: true
    restart: always
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LOG_RETENTION_MS: 600000
      KAFKA_NUM_PARTITIONS: 5
    depends_on:
      - zookeeper

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
        - ./mongo:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    depends_on:
      - mongo

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - ./influxDB:/var/lib/influxdb
    env_file:
      - ./influxDB/.env
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "4000:3000"    
    environment:
      GF_SERVER_ROOT_URL: http://localhost:4000
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: 12345678
    volumes:
      - ./grafana:/var/lib/grafana
    restart: always
    depends_on:
      - influxdb

  nginx:
    image: nginx:latest
    container_name: nginx_load_balancer
    ports:
      - "8004:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - p_wave_detector_load_balance
    restart: always

  data_provider:
    container_name: data_provider
    build:
      context: ./data_provider-multiprocess
    tty: true
    depends_on:
      - kafka1
    restart: always

  load_balancer:
    build:
      context: ./load_balancer
    deploy:
      replicas: 1
    tty: true
    depends_on:
      - kafka1
    restart: always

  p_wave_detector_load_balance:
    build:
      context: ./p_wave_detector_load_balance
    ports:
      - "8004"
    deploy:
      replicas: 2
    tty: true
    depends_on:
      - kafka1
    restart: always

  restarter:
    image: docker:cli
    restart: unless-stopped
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    entrypoint: ["/bin/sh","-c"]
    command:
      - |
        while true; do
          # docker ps

          sleep 600
          docker restart paper-eews-p_wave_detector_load_balance-1
          docker restart paper-eews-p_wave_detector-1
          docker restart paper-eews-data_archiver-1
          
          # for topic in $(docker exec kafka1 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka1:9092 --list); do
          #   for partition in $(docker exec kafka1 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka1:9092 --describe --topic $topic | grep 'Partition:' | awk '{print $2}'); do
          #     docker exec kafka1 /opt/kafka/bin/kafka-delete-records.sh --bootstrap-server kafka1:9092 --offset-json "{\"partitions\":[{\"topic\":\"$topic\",\"partition\":$partition,\"offset\":10}]}"
          #   done
          # done
          
          sleep 30
          docker restart paper-eews-p_wave_detector_load_balance-2
          docker restart paper-eews-p_wave_detector-2
          docker restart paper-eews-data_archiver-2

          sleep 30
          docker restart paper-eews-p_wave_detector_load_balance-3
          docker restart paper-eews-p_wave_detector-3
          docker restart paper-eews-data_archiver-3

          # for topic in $(docker exec kafka2 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka2:9093 --list); do
          #   for partition in $(docker exec kafka2 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka2:9093 --describe --topic $topic | grep 'Partition:' | awk '{print $2}'); do
          #     docker exec kafka2 /opt/kafka/bin/kafka-delete-records.sh --bootstrap-server kafka2:9093 --offset-json "{\"partitions\":[{\"topic\":\"$topic\",\"partition\":$partition,\"offset\":10}]}"
          #   done
          # done

          sleep 30
          docker restart paper-eews-p_wave_detector_load_balance-4
          docker restart paper-eews-p_wave_detector-4
          docker restart paper-eews-data_archiver-4
          
          sleep 30
          docker restart paper-eews-p_wave_detector_load_balance-5
          docker restart paper-eews-p_wave_detector-5
          docker restart paper-eews-data_archiver-5

          # for topic in $(docker exec kafka3 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka3:9094 --list); do
          #   for partition in $(docker exec kafka3 /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka3:9094 --describe --topic $topic | grep 'Partition:' | awk '{print $2}'); do
          #     docker exec kafka3 /opt/kafka/bin/kafka-delete-records.sh --bootstrap-server kafka3:9094 --offset-json "{\"partitions\":[{\"topic\":\"$topic\",\"partition\":$partition,\"offset\":10}]}"
          #   done
          # done
        done

  loc_mag_detector:
    build:
      context: ./loc_mag_detector
    deploy:
      replicas: 1
    tty: true
    depends_on:
      - kafka1
    restart: always

  data_archiver:
    build:
      context: ./data_archiver
    deploy:
      replicas: 5
    volumes:
      - ./data_archiver/data_archive:/mnt/data
    tty: true
    depends_on:
      - kafka1
      - influxdb
      - mongo
      - mongo-express
    restart: always

  api_server:
    container_name: api_server
    build:
      context: ./api_server
    ports:
      - "3333:3333"
    tty: true
    depends_on:
      - kafka1
    restart: always

  fast_api:
    container_name: fast_api
    build:
      context: ./fast_api
    ports:
      - "3334:3333"
    tty: true
    depends_on:
      - kafka1
    restart: always